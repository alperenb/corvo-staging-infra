global
  maxconn 2000
  pidfile /var/run/haproxy.pid
  log     127.0.0.1 local0
  log     127.0.0.1 local1 notice
defaults
  mode http
  log global
  option  httplog
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  retries 3
  backlog 10000
  timeout client          25s
  timeout connect          5s
  timeout server          25s
# timeout tunnel available in ALOHA 5.5 or HAProxy 1.5-dev10 and higher
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  default-server inter 3s rise 2 fall 3
  option forwardfor


frontend http_in
  bind *:{{ http_binding_port }} name http
  maxconn 60000
## routing based on Host header
  acl host_ws hdr_beg(Host) -i ws.
  use_backend seagull_queue_listener if host_ws
## routing based on websocket protocol header
  acl hdr_connection_upgrade hdr(Connection)  -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)     -i WebSocket
  
  use_backend seagull_queue_listener if hdr_connection_upgrade hdr_upgrade_websocket
  stats enable
  stats hide-version 
  stats realm   Haproxy\ Statistics
  stats uri /haproxy?stats
  stats auth nevalabsadmin:Neva1515

backend seagull_queue_listener
  balance {{ seagull_listener_balance }}

## websocket protocol validation
  acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)                    -i WebSocket
  acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
  acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1
  # http-request deny if ! hdr_connection_upgrade ! hdr_upgrade_websocket ! hdr_websocket_key ! hdr_websocket_version

## ensure our application protocol name is valid 
## (don't forget to update the list each time you publish new applications)
  # acl ws_valid_protocol hdr(Sec-WebSocket-Protocol) echo-protocol
  # http-request deny if ! ws_valid_protocol

## websocket health checking
  # option httpchk GET / HTTP/1.1\r\nHost:\ ws.domain.com\r\nConnection:\ Upgrade\r\nUpgrade:\ websocket\r\nSec-WebSocket-Key:\ haproxy\r\nSec-WebSocket-Version:\ 13\r\nSec-WebSocket-Protocol:\ echo-protocol
  # http-check expect status 101
{% for host in groups['seagull_taskqueue_listener'] %}
  server {{ host }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ hostvars[host]['port'] }} maxconn 30000 weight 10 cookie {{ host }} check
{% endfor %}


listen rabbitmq_5672
  bind *:{{ hostvars[groups['rabbitmq'][0]]['port'] }}
  mode tcp
  balance {{ rabbitmq_balance }}
  stats enable
  option  forwardfor
  option  tcpka  
  log global
  # retries 3
  # contimeout	5000
  # clitimeout	0
  # srvtimeout	0
  # option tcplog
  # option persist
  # balance roundrobin
{% for host in groups['rabbitmq'] %}
  server {{ host }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ hostvars[host]['port'] }} check
{% endfor %}


listen rabbitmq_61613_STOMP
  bind *:{{ rabbitmq_stomp_binding_port }}
  mode tcp
  balance {{ rabbitmq_stomp_balance }}
  stats enable
  option  forwardfor
  option  tcpka  
  log global
  # retries 3
  # contimeout	5000
  # clitimeout	0
  # srvtimeout	0
  # option tcplog
  # option persist
  # balance roundrobin
{% for host in groups['rabbitmq'] %}
  server {{ host }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ hostvars[host]['stomp_port'] }} check
{% endfor %}

defaults redis
  mode tcp
  
frontend ft_redis
  bind *:{{ hostvars[groups['redis'][0]]['port'] }} name redis
  default_backend bk_redis

backend bk_redis
  option tcp-check
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send info\ replication\r\n
  tcp-check expect string role:master
  tcp-check send QUIT\r\n
  tcp-check expect string +OK
{% for host in groups['redis'] %}
  server {{ host }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ hostvars[host]['port'] }} check inter 1s
{% endfor %}